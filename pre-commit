#!/usr/bin/php
<?php
echo PHP_EOL;

//## Loading & checking configuration
//########################################
if(file_exists('.git/hooks/hook-config.php')){
	require('hook-config.php');
}else{
	echo "/!\\ Could not load the hooks configuration at " . getcwd() . ".git/hooks/hook-config.php.";
    echo PHP_EOL;
	exit(1);
}


//Validate the configuration IP.
if(!file_exists(PHPUNIT_PATH)){
	echo "/!\\ PHPUnit could not be located at {PHPUNIT_PATH}. Check the .git/hooks/hook-config.php file.";
	echo PHP_EOL;
	exit(1);
}
if(!file_exists(PHPCS_PATH)){
	echo "/!\\ PHPCodeSniffer could not be located at {PHPUNIT_PATH}. Check the .git/hooks/hook-config.php file.";
	echo PHP_EOL;
	exit(1);
}
if(!file_exists(PHP_PATH)){
	echo "/!\\ PHP could not be located at {PHPUNIT_PATH}. Check the .git/hooks/hook-config.php file.";
	echo PHP_EOL;
	exit(1);
}



	
//## Running PHP -l on the project
//########################################

echo "Checking PHP syntax error ...";
echo PHP_EOL;


//Extract the list of the commit files
$output = array();
$rc     = 0;
exec('git rev-parse --verify HEAD 2> /dev/null', $output, $rc);
if ($rc == 0)  $against = 'HEAD';
else           $against = '4b825dc642cb6eb9a060e54bf8d69288fbee4904';

exec('git diff-index --cached --name-only '. $against, $output);



//Check files
$needle = '/(\.php|\.module|\.install)$/';
foreach ($output as $file) {

	if (!preg_match($needle, $file)) {
        // only check php files
        continue;
    }
    
	$lint_output = array();
    $rc          = 0;
    exec(PHP_PATH . ' -l '. escapeshellarg($file) . ' 2> /dev/null', $lint_output, $rc);
    if ($rc == 0) {
        continue;
    } else {
    	echo PHP_EOL;
    	echo '(-!-) Syntax check failed :' . PHP_EOL;
    	echo implode(PHP_EOL, $lint_output);
    	exit(1);
    }

}

echo '√ No syntax error!';
echo PHP_EOL;


//## Running PHPUnit test on the project
//########################################

echo "Processing PHPUnit tests suite ...";
echo PHP_EOL;

// execute unit tests (it is assumed that a phpunit.xml configuration is present 
// in the root of the project)
$output = array();
$rc     = 0;
exec(PHPUNIT_PATH . ' -c app/phpunit.xml.dist --tap', $output, $rc); // cwd is assumed here

// if the build failed, output a summary and fail
if ($returnCode !== 0) {

    // output the status
    echo '(-!-) Test suite failed :' . PHP_EOL;
    foreach($output as $line){
    	if(!in_array(substr($line, 0, 3), array('ok ', 'TAP', '  -'))){
    		echo $line . PHP_EOL;
    	}
    }

    // abort the commit
    exit(1);
}

echo '√ All test succeeded!';
echo PHP_EOL;






echo PHP_EOL;
exit(0);